package com.soen6441.core.tower;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultElement;

import com.soen6441.core.ArchiveCenter;
import com.soen6441.core.IArchive;
import com.soen6441.core.play.Play;


/**
 * This class responds to manage towers. Such as, create, upgrade, etc. 
 * This class uses dom4j to read XML files.
 * 
 * @see TowerManagerFactory
 * @see Tower
 * 
 * @author Haiyang Sun
 *
 * @version $Revision: 1.0 $
 */

public class TowerManager implements IArchive {
	
	/*
	 * Properties of TowerManager
	 */
	private String towerType;
	private String filePath;
	private int initialPrice;
	
	/*
	 * This list is used to store all levels of tower object of a particular tower type.
	 */
	private List<Tower> leveledTowers = new ArrayList<Tower>();
	
	/**
	 * Constructor of TowerManager.
	 * Call analyze method to generate all levels of a particular type of tower.
	 * 
	 * @param towerType The string use to defines a special type of tower.
	 * @param filePath The string use to define a file path of TowerManager.
	 * @see #analyse() 
     */
	public TowerManager(String towerType, String filePath) {
		
		this.towerType = towerType;
		this.filePath = filePath;
		this.analyse();
	}
	
	/**
	 * This method is used to read and analyze files that store tower information.
	 * Get an XML element to decode.
	 */
	public void analyse() {
		
		//Read XML file which stores tower information.
		SAXReader reader = new SAXReader();
	    Document document = null;
	    
		try {
			document = reader.read(filePath);
		} catch (DocumentException e) {
			e.printStackTrace();
		}
		
		Element root = document.getRootElement();
		Element towerManagerElement = root.element(NameForArchiving.Class);
		
		this.decode(towerManagerElement);
		
	}
	
	/**
     * @author Haiyang Sun
	 */
	public class NameForArchiving{
		
		public static final String Class = "TowerManager";
		private static final String InitialPrice = "initialPrice";
		private static final String LeveledTowers = "leveledTowers";
	
	}
	
	/**
	 * All levels of tower object will be generated by this method and will be put in leveledTower list.
	 * @param towerManagerElement Element
	 * @see IArchive
     */
	@Override
	public void decode(Element towerManagerElement) {
		
        this.initialPrice = (Integer.parseInt(towerManagerElement.element(NameForArchiving.InitialPrice).getText()));
        Element leveledTowersElement = towerManagerElement.element(NameForArchiving.LeveledTowers);
        
        //Generate tower depending on towerType property of this class.
        for ( @SuppressWarnings("rawtypes")Iterator i = leveledTowersElement.elementIterator(); i.hasNext(); ) {
        	
            Element element = (Element)i.next();
                        
            Tower tower = (Tower) ArchiveCenter.decodeElement(element);
            
            tower.setManager(this);
    		
    		leveledTowers.add(tower);
           	
        }
		
	}
	
	/**
	 * This method is used to convert value of properties of a particular class to an XML data element.
	 * @see IArchive#encode()
	 */
	@Override
	public Element encode() {
		
		Element element = new DefaultElement(NameForArchiving.Class);
		element.addElement(NameForArchiving.InitialPrice).addText(String.valueOf(this.getInitialPrice()));
		return element;
	}	
	
	
	/**
	 * Create a specific Tower object.
	 * This method uses copyTo method of tower class.
	 * 
	 * @return Tower  
     * @see Tower#copyTo(Tower)
     */
	public Tower createTower() {
		
		Tower tower = leveledTowers.get(0);
		Tower newTower = null;
		try {
			newTower = tower.getClass().newInstance();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		tower.copyTo(newTower);
		newTower.setIdentity(Play.currentPlay().generateIdentity());
		return newTower;
		
	}
	
	/**
	 * This method is used to upgrade an existing tower.
	 * This method uses copyTo method of tower class.
	 * 
	 * @param tower a Tower object
	 * @see Tower#copyTo(Tower)
     */
	public void upgrade(Tower tower) {
		
		if (tower.getLevel() < leveledTowers.size()) {
			leveledTowers.get(tower.getLevel()).copyTo(tower);
		}
		
	}
	
	/**
	 * Check whether the tower is in its highest level, if it is, return false, else return true;
	 * To use this method should call from tower
	 * 
	 * @param tower an existing tower
	 * @return boolean
     * @see Tower#canUpgrade()
     */
	public boolean canUpgrade(Tower tower) {
		
		if (tower.getLevel() >= leveledTowers.size()) {
			return false;
		}
		return true;
	}

	/**
	 * Method getTowerType.
	 * @return String
     */
	public String getTowerType() {
		return towerType;
	}

	/**
	 * Method setTowerType.
	 * @param towerType String
	 */
	public void setTowerType(String towerType) {
		this.towerType = towerType;
	}

	/**
	 * Method getFilePath.
	 * @return String
     */
	public String getFilePath() {
		return filePath;
	}

	/**
	 * Method setFilePath.
	 * @param filePath String
	 */
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}

	/**
	 * Method getInitialPrice.
	 * @return int
     */
	public int getInitialPrice() {
		return initialPrice;
	}

	/**
	 * Method setInitialPrice.
	 * @param initialPrice int
	 */
	public void setInitialPrice(int initialPrice) {
		this.initialPrice = initialPrice;
	}

	/**
	 * Method getLeveledTowers.
	 * @return List<Tower>
     */
	public List<Tower> getLeveledTowers() {
		return leveledTowers;
	}

	/**
	 * Method setLeveledTowers.
	 * @param leveledTowers List<Tower>
	 */
	public void setLeveledTowers(List<Tower> leveledTowers) {
		this.leveledTowers = leveledTowers;
	}


	
}
